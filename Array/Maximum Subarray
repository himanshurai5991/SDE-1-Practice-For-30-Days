//Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
//If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

//Approach 1:

   public int maxSubArray(int[] nums) {
        int n=nums.length;
        int[] dp=new int[nums.length];
        if(n==1)
            return nums[0];
        if(n==0)
            return  0;
        dp[0]=nums[0];
        int res=nums[0];
        for(int i=1;i<n;i++){
            dp[i]=Math.max(nums[i]+dp[i-1],nums[i]);
            res=Math.max(dp[i],res);
        }
        
    return res;
    }
    
   // Approach 2:
   
    public int maxSubArray(int[] nums) {
         int size = nums.length; 
        int max_so_far = Integer.MIN_VALUE, max_ending_here = 0; 
  
        for (int i = 0; i < size; i++) 
        { 
            max_ending_here = max_ending_here + nums[i]; 
            if (max_so_far < max_ending_here) 
                max_so_far = max_ending_here; 
            if (max_ending_here < 0) 
                max_ending_here = 0; 
        } 
        return max_so_far; 
    }
    
